/* eslint-disable react/no-unescaped-entities */
import { useState, useContext, useEffect } from "react";
import RegisterToHost from "../styles/RegisterToHost.module.css";
import Image from "next/image";
import { Col, Container, Row, Button } from "react-bootstrap";
import { Checkbox, Input, Upload, Button as ButtonANTD, Form, message } from "antd";
import { UploadOutlined } from '@ant-design/icons';
const { TextArea } = Input;
import Head from "next/head";
import Link from "next/link";
import dynamic from "next/dynamic";
import axios from 'axios';
import { AuthContext } from "@/context/auth_context";
import axiosInstance from "@/utils/axiosInstance"
import { signIn, signOut } from "next-auth/react";

import { useRouter } from "next/router";
const BottomSection = dynamic(
  () => import("../../common components/bottomGroup"),
  {
    suspense: true,
  }
);
const Register_to_host = () => {
  const [showA, setShowA] = useState(false);
  const [showB, setShowB] = useState(false);
  const [showC, setShowC] = useState(false);
  const [showD, setShowD] = useState(false);
  const [showE, setShowE] = useState(false);
  const [showF, setShowF] = useState(false);

  const toggleButtonA = () => {
    setShowA(!showA);
  };

  const toggleButtonB = () => {
    setShowB(!showB);
  };

  const toggleButtonC = () => {
    setShowC(!showC);
  };

  const toggleButtonD = () => {
    setShowD(!showD);
  };

  const toggleButtonE = () => {
    setShowE(!showE);
  };

  const toggleButtonF = () => {
    setShowF(!showF);
  };


  const Router = useRouter();

  const [fileList, setFileList] = useState([]);

  const props = {
    onRemove: (file) => {
      const index = fileList.indexOf(file);
      const newFileList = fileList.slice();
      newFileList.splice(index, 1);
      setFileList(newFileList);
    },
    beforeUpload: (file) => {
      setFileList([file]);
      return false;
    },
    fileList,
  };

  const [form3] = Form.useForm();
  const [loadings, setLoadings] = useState(false);

  const ContextUserDetails = useContext(AuthContext);


  //! SIGNUP API FUNCTION
  const onSubmitHostSignup = async (values) => {

    setLoadings(true);
    try {
      const formData = new FormData();

      formData.append('email', values.email);
      formData.append('address', values.address);
      formData.append('mobile', values.mobile);
      formData.append('password', values.password);
      formData.append('username', values.username);
      formData.append('type', "Host");
      fileList.length && fileList.forEach((file) => {
        formData.append('profile', file);
      });

      // console.log(gdfg)
      //! Register to host
      const url = `/v1/auth/user/signup`;
      // console.log("urlL ", url)
      const response = await axiosInstance({
        method: 'post',
        url: url,
        data: formData,
        headers: {
          'Content-Type': `multipart/form-data;`,
        },
      });
      // console.log("response", response)

      // //* Close Register Modal on Success Signup
      if (response.status === 201) {
        setLoadings(true);

        const Result = await signIn("credentials", {
          redirect: false,
          email: values.email,
          password: values.password,
        });

        if (Result?.error) {

          let res_error = JSON.parse(Result?.error)
          message.error(res_error.responseMessage);
          setLoadings(false);
        } else {

          message.success("Signup successfully");
          setTimeout(() => {
            window.location.reload()
            setLoadings(false);
          }, 2000);
        }

      }
    } catch (error) {
      console.log("error: ", error)
      setLoadings(false);
      const errorMessage = error.response
        ? error.response.data.message
        : "An error occurred during signup.";
      message.error(errorMessage);
    }
    // console.log(values);
  };
  return (
    <>
      <Head>
        <title>Ventify | Register As Host</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        {/*----------------              TOP IMAGE SECTION         --------------------*/}

        <div className={RegisterToHost.targetBall}>
          <Image
            src={`${process.env.NEXT_PUBLIC_ASSETS_URL}/images/register-to-host.svg`}
            alt="Target Ball"
            fill
            className={RegisterToHost.imgTargetBall}
          ></Image>
        </div>

        {/*--------------------------        REGISTER COLUMN CONTAINER       ----------------------- */}

        <Form
          onFinish={onSubmitHostSignup}
          form={form3}
          name="register_form"
          scrollToFirstError
        >
          <div className={RegisterToHost.registerParent}>
            <Col md={6} className={RegisterToHost.columnA}>
              <h3 className={RegisterToHost.golfheading}>
                Become a {process.env.NEXT_PUBLIC_APP_NAME} Host!
              </h3>
              <p className={RegisterToHost.para}>
                Host golf travelers, monetize your property.
              </p>
            </Col>

            <Col md={4} className={RegisterToHost.columnB}>
              <div>
                <h5 className={RegisterToHost.registerTitle}>Register</h5>
                <div className={RegisterToHost.registerContent}>
                  <Col className={RegisterToHost.inputParent}>
                    <div>
                      <Form.Item
                        className={RegisterToHost.form_items}
                        name="username"
                        tooltip="What do you want others to call you?"
                        rules={[
                          {
                            required: true,
                            message: "Please input your User Name!",
                            whitespace: true,
                          },
                        ]}
                      >
                        <Input
                          name="username"
                          // prefix={<UserOutlined />}
                          placeholder="Enter User Name"
                          className={RegisterToHost.inputA}
                        />
                      </Form.Item>

                      <Form.Item
                        className={RegisterToHost.form_items}
                        name="email"
                        rules={[
                          {
                            type: "email",
                            message: "The input is not valid E-mail!",
                          },
                          {
                            required: true,
                            message: "Please input your E-mail!",
                          },
                        ]}
                      >
                        <Input
                          name="email"
                          className={RegisterToHost.inputB}
                          type="email"
                          placeholder="Email"
                        ></Input>
                      </Form.Item>

                      <Form.Item
                        className={RegisterToHost.form_items}
                        name="password"
                        rules={[
                          {
                            required: true,
                            message: "Please input your password!",
                          },
                          {
                            min: 5,
                          },
                        ]}
                        hasFeedback
                      >
                        <Input.Password
                          className={RegisterToHost.inputB}
                          type="password"
                          placeholder="Password"
                        ></Input.Password>
                      </Form.Item>

                      <Form.Item
                        className={RegisterToHost.form_items}
                        name="confirm"
                        dependencies={["password"]}
                        hasFeedback
                        rules={[
                          {
                            required: true,
                            message: "Please confirm your password!",
                          },
                          ({ getFieldValue }) => ({
                            validator(_, value) {
                              if (!value || getFieldValue("password") === value) {
                                return Promise.resolve();
                              }
                              return Promise.reject(
                                new Error(
                                  "The two passwords that you entered do not match!"
                                )
                              );
                            },
                          }),
                        ]}
                      >
                        <Input.Password
                          className={RegisterToHost.inputB}
                          placeholder="Repeat Password"
                        ></Input.Password>
                      </Form.Item>

                      <Form.Item
                        className={RegisterToHost.form_items}
                        name="mobile"
                        tooltip="Mobile Number"
                        rules={[
                          {
                            pattern: /[1-9]{1}[0-9]{7,11}$/,
                            message: "The input is not valid mobile number!",
                          },
                          {
                            required: true,
                            message: "Please input your mobile number!",
                          },
                        ]}
                      >
                        <Input
                          className={RegisterToHost.inputB}
                          placeholder="Mobile"
                        ></Input>
                      </Form.Item>

                      <Form.Item
                        className={RegisterToHost.form_items}
                        name="address"
                        tooltip="Address"

                      >
                        <TextArea
                          className={RegisterToHost.inputD}
                          type="password"
                          placeholder="Address"
                        ></TextArea>
                      </Form.Item>
                    </div>

                    <div className="pt-3">
                      <Upload {...props}>
                        <ButtonANTD icon={<UploadOutlined />}>Upload picture</ButtonANTD>
                      </Upload>
                    </div>
                  </Col>

                  <Row>
                    <div>
                      <Form.Item
                        className={RegisterToHost.form_items_checkbox}
                        name="conditions"
                        valuePropName="checked"
                        rules={[
                          {
                            validator: (_, value) =>
                              value
                                ? Promise.resolve()
                                : Promise.reject(
                                  new Error("Should accept Terms & Conditions")
                                ),
                          },
                        ]}
                      >
                        <Checkbox className={RegisterToHost.agreeOptionA}>
                          I agree with your{" "}
                          <Link
                            className={RegisterToHost.conditions_links}
                            href="/term_and_conditions"
                          >
                            {" "}
                            Terms & Conditions
                          </Link>
                        </Checkbox>
                      </Form.Item>
                    </div>
                    <div>
                      <Form.Item
                        className={RegisterToHost.form_items_checkbox}
                        name="privacy"
                        valuePropName="checked"
                        rules={[
                          {
                            validator: (_, value) =>
                              value
                                ? Promise.resolve()
                                : Promise.reject(
                                  new Error("Should accept Privacy & Policy")
                                ),
                          },
                        ]}
                      >
                        <Checkbox className={RegisterToHost.agreeOptionB}>
                          I agree with your{" "}
                          <Link
                            className={RegisterToHost.conditions_links}
                            href="/privacy"
                            target="_blank"
                          >
                            {" "}
                            Privacy Policy{" "}
                          </Link>
                        </Checkbox>
                      </Form.Item>
                    </div>
                  </Row>

                  <ButtonANTD
                    // disabled={IsRegisterBtnDisable}
                    htmlType="submit_signup"
                    loading={loadings}
                    className={RegisterToHost.registerBtn}
                  >
                    Register
                  </ButtonANTD>
                  {/* <Button className={RegisterToHost.registerBtn}>Register</Button> */}
                </div>
              </div>
            </Col>
          </div>
        </Form>
      </div>

      {/* ---------------------------        THREE COLUMN CONTAINER            -------------------------- */}

      <Container>
        <Row>
          <Col md={4} className={RegisterToHost.textColumn}>
            <h4 className={RegisterToHost.threeColumnTitle}>
              Why Choose {process.env.NEXT_PUBLIC_APP_NAME}?
            </h4>
            <p className={RegisterToHost.threeColumnPara}>
              Golfers love their sport, and many love to travel as well. Those
              that love both are tired of stumbling around on other vacation
              rental platforms trying to place a rental near their favorite
              course or tournament. Golf-travelers are searching for the next
              rental on {process.env.NEXT_PUBLIC_APP_NAME} right now, will they find your home?
            </p>
          </Col>

          <Col md={4} className={RegisterToHost.textColumn}>
            <h4 className={RegisterToHost.threeColumnTitle}>
              Booking Made Easy.
            </h4>
            <p className={RegisterToHost.threeColumnPara}>
              Travelers can search for their next {process.env.NEXT_PUBLIC_APP_NAME} by any of the world's
              38,000+ golf courses, as well as by major tournament. Easy to
              locate, easy to book, golf-industry partner resources and
              discounts...
            </p>
          </Col>

          <Col md={4} className={RegisterToHost.textColumn}>
            <h4 className={RegisterToHost.threeColumnTitle}>
              Market to Your Key Clientele.
            </h4>
            <p className={RegisterToHost.threeColumnPara}>
              If you own a vacation rental property in the vicinity of a golf
              course, golf-travelers are a key market for you. Golfers are
              increasingly moving their search efforts over to {process.env.NEXT_PUBLIC_APP_NAME}, easier
              to search, more golf to enjoy.
            </p>
          </Col>
        </Row>
      </Container>

      {/* ---------------------------        TEXT IN SIDE OF IMAGE CONTAINER         ----------------------------- */}

      <Container className={RegisterToHost.textImageParent}>
        <h3 className={RegisterToHost.hostTitle}>How To Host</h3>

        <Row className={RegisterToHost.rowContentA}>
          <Col md={6} className={RegisterToHost.textParentA}>
            <h4 className={RegisterToHost.textTitle}>
              1. List Your Home or Condo
            </h4>
            <p className={RegisterToHost.paragraph}>
              Complete our simple listing loop, tell us which course(s) the home
              is within 2 miles of, and we’ll promote your property to
              golf-travelers the world over.
            </p>
          </Col>

          <Col md={6} className={RegisterToHost.imageParent}>
            <Image
              src={`${process.env.NEXT_PUBLIC_ASSETS_URL}/images/condoView.png`}
              alt="condoView"
              fill
              className={RegisterToHost.condoImage}
            ></Image>
          </Col>
        </Row>

        <Row className={RegisterToHost.rowContentA}>
          <Col md={6} className={RegisterToHost.imageParent}>
            <Image
              src={`${process.env.NEXT_PUBLIC_ASSETS_URL}/images/lunch.svg`}
              alt="condoView"
              fill
              className={RegisterToHost.lunchImage}
            ></Image>
          </Col>

          <Col md={6} className={RegisterToHost.textParentB}>
            <h4 className={RegisterToHost.textTitle}>
              {" "}
              2. Welcome Your Guests
            </h4>
            <p className={RegisterToHost.paragraph}>
              Once our golf travelers have located and booked your home, be sure
              to deliver a clean and reliable accommodation. For safety and
              reliability, make sure all communications and payments are made on
              our site.
            </p>
          </Col>
        </Row>

        <Row className={RegisterToHost.rowContentA}>
          <Col md={6} className={RegisterToHost.textParentC}>
            <h4 className={RegisterToHost.textTitle}>3. Earn Money</h4>
            <p className={RegisterToHost.paragraph}>
              {process.env.NEXT_PUBLIC_APP_NAME} pays out to hosts approximately 48 hours after the
              check-in date if no complaints have been registered. You set the
              price, we pay out promptly!
            </p>
          </Col>

          <Col md={6} className={RegisterToHost.imageParent}>
            <Image
              src={`${process.env.NEXT_PUBLIC_ASSETS_URL}/images/earnMoney.webp`}
              alt="condoView"
              fill
              className={RegisterToHost.earnMoney}
            ></Image>
          </Col>
        </Row>
      </Container>

      {/* ---------------------------      FREQUENTLY ASKED QUESTIONS      ------------------------------*/}

      <Container>
        <Row className={RegisterToHost.faqRow}>
          <Col md={6} className={RegisterToHost.textParentD}>
            <h3 className={RegisterToHost.textTitle}>
              Frequently Asked Questions
            </h3>
            <p className={RegisterToHost.paragraph}>
              Our team has provided answers below to some frequently asked
              questions. Please feel free to reach out to our help team if
              further information is needed, and thanks for booking with
              {process.env.NEXT_PUBLIC_APP_NAME}!
            </p>
          </Col>

          <Col md={6}>
            <div>
              <div>
                <div className={RegisterToHost.headingSign}>
                  <p className={RegisterToHost.faqTitle}>
                    How do I get more info about the property's amenities?
                  </p>
                  <Button
                    className={RegisterToHost.sign}
                    onClick={toggleButtonA}
                  >
                    {showA ? "-" : "+"}
                  </Button>
                </div>
                {showA && (
                  <div>
                    <p className={RegisterToHost.faqPara}>
                      You can find information on a property’s amenities on the
                      home’s profile page. Reach out to the host for more
                      specific information.
                    </p>
                  </div>
                )}
              </div>
            </div>

            <hr className={RegisterToHost.horizontaLine} />

            <div>
              <div className={RegisterToHost.headingSign}>
                <p className={RegisterToHost.faqTitle}>
                  I can't find my rental confirmation email. What Should I do?
                </p>
                <Button className={RegisterToHost.sign} onClick={toggleButtonB}>
                  {showB ? "-" : "+"}
                </Button>
              </div>
              {showB && (
                <div>
                  <p>
                    Please be sure to check your email inbox, junk, and spam
                    folders. If you still can’t find your confirmation, refer to
                    your {process.env.NEXT_PUBLIC_APP_NAME} admin area, or feel free to reach out to our
                    help team.
                  </p>
                </div>
              )}
            </div>

            <hr className={RegisterToHost.horizontaLine} />

            <div>
              <div className={RegisterToHost.headingSign}>
                <p className={RegisterToHost.faqTitle}>
                  I'll be arriving outside check-in hours. Can I still check in?
                </p>
                <Button className={RegisterToHost.sign} onClick={toggleButtonC}>
                  {showC ? "-" : "+"}
                </Button>
              </div>
              {showC && (
                <div>
                  <p>
                    This depends on the individual host, who will do their best
                    to meet your needs. We recommend dealing with arrival time
                    issues as early in the process as possible.
                  </p>
                </div>
              )}
            </div>

            <hr className={RegisterToHost.horizontaLine} />

            <div>
              <div className={RegisterToHost.headingSign}>
                <p className={RegisterToHost.faqTitle}>
                  I'd like to check out after the stated check-out time, is that
                  possible?
                </p>
                <Button className={RegisterToHost.sign} onClick={toggleButtonD}>
                  {showD ? "-" : "+"}
                </Button>
              </div>
              {showD && (
                <div>
                  <p>
                    A late check-out can only be arranged with the host, and is
                    not guaranteed. Reach out to see what can be arranged, and
                    keep in mind that availability and proper cleaning time have
                    to be accounted for.
                  </p>
                </div>
              )}
            </div>

            <hr className={RegisterToHost.horizontaLine} />

            <div>
              <div className={RegisterToHost.headingSign}>
                <p className={RegisterToHost.faqTitle}>
                  How Do I find out if my desired property allows pets?
                </p>
                <Button className={RegisterToHost.sign} onClick={toggleButtonE}>
                  {showE ? "-" : "+"}
                </Button>
              </div>
              {showE && (
                <div>
                  <p>
                    Pet policies should be clearly stated on the home’s profile
                    page. Reach out to the Host for any needed clarification, or
                    to see if a variance can be made.
                  </p>
                </div>
              )}
            </div>

            <hr className={RegisterToHost.horizontaLine} />

            <div>
              <div className={RegisterToHost.headingSign}>
                <p className={RegisterToHost.faqTitle}>
                  What payment methods are accepted by {process.env.NEXT_PUBLIC_APP_NAME}?
                </p>
                <Button className={RegisterToHost.sign} onClick={toggleButtonF}>
                  {showF ? "-" : "+"}
                </Button>
              </div>
              {showF && (
                <div>
                  <p>
                    Major credit cards and Paypal are acceptable payment methods
                    for properties listed on {process.env.NEXT_PUBLIC_APP_NAME}.com. You will have your
                    choice of payment methods at the tome of booking.
                  </p>
                </div>
              )}
            </div>
          </Col>
        </Row>
      </Container>

      {/*---------------------------      GO LIVE ON NOW CONTAINER       ------------------------------ */}
      <Container>
        <Row className={RegisterToHost.goliveRow}>
          <Col md={6} className={RegisterToHost.textParentE}>
            <h4 className={RegisterToHost.listHomeTitle}>
              List Your Home or Condo Today! Go Live on {process.env.NEXT_PUBLIC_APP_NAME} Now
            </h4>
            <Button className={RegisterToHost.goliveBtn}>
              Go Live on {process.env.NEXT_PUBLIC_APP_NAME} now
            </Button>
          </Col>
          <Col md={6} className={RegisterToHost.imageParent}>
            <Image
              src={`${process.env.NEXT_PUBLIC_ASSETS_URL}/images/beach.webp`}
              alt="Beach"
              fill
              className={RegisterToHost.beach}
            ></Image>
          </Col>
        </Row>
      </Container>

      {/*  -----------------------------           BOTTOM IMAGE SECTION         ----------------------------  */}

      <BottomSection />
    </>
  );
};

export default Register_to_host;
